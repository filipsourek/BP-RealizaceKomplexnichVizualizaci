@using SmartBuildingVisualization.Client.Core.Interfaces
@using SmartBuildingVisualization.Client.Pages.Components.Base
@using SmartBuildingVisualization.Shared.Models
@using System.Text.Json

@inject IDataService DataService
@inject IDateService DateService
@inject IDataStorage DataStorage

@inherits GraphBase

<div class="container mt-2">

    <TimeFormatPanel OnTimeFormatChangedCallback="@((args) => TimeFormatChange(args))" ShowMinutes="true" TimeFormat="TimeFormat"></TimeFormatPanel>

    <div class="mt-3">
        @if (!SelectedObjects.Any())
        {
            <WarningPanel Text="Nejsou vybrána žádná zařízení"></WarningPanel>
        }
        else
        {
            <BackForward DateStart="DateStart" DateEnd="DateEnd" TimeFormat="TimeFormat" OnClickCallback="@((args) => MoveCallback(args))"></BackForward>
        }
    </div>
</div>

<div>
    @if(dataReady){
         <DeviceGraph2 SelectedDevices="@SelectedDevices" DeviceIds="@DeviceIds" DateStart="@DateStart" DateEnd="DateEnd" TimeFormat="@TimeFormat" OnSerieClickCallback="@((args) => ChangeDate(args, TimeFormat))"></DeviceGraph2>
    }
</div>

@code {
    private List<Device> SelectedDevices { get; set; } = new List<Device>();

    private DateTime NewestDate { get; set; }
    private bool firstRender = true;

    private bool dataReady = false;

    protected override void OnInitialized()
    {
        oldUpdate = newUpdate;
        TimeFormat = TimeFormat.Year;
        dataReady = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        SelectedDevices = SelectedObjects.SelectMany(obj => obj.GetAllDevices()).ToList();

        if (DeviceIds.Any())
        {
            if (firstRender)
            {
                await InitSetup(TimeFormat);
                firstRender = false;
            }
        }
        if(newUpdate != oldUpdate){
            await StoreData();
            oldUpdate = newUpdate;
        }
    }

    private async Task TimeFormatChange(TimeFormat timeFormat)
    {
        if (timeFormat > TimeFormat)
        {
            TimeFormat = timeFormat;
            DateStart = DateService.ResetDate(DateService.AddDate(DateStart, timeFormat, -GetOffset(timeFormat) / 2), timeFormat, true);
            DateEnd = DateService.ResetDate(DateService.AddDate(DateEnd, timeFormat, GetOffset(timeFormat) / 2), timeFormat, false);
        }
        else
        {
            await DefaultInit(timeFormat);
        }
    }
    private async Task InitSetup(TimeFormat timeFormat)
    {
        try
        {
            List<object> data = await DataStorage.GetData<List<object>>(Id.ToString());
            TimeFormat = (TimeFormat)((JsonElement)data[0]).GetInt16();

            DateStart = ((JsonElement)data[1]).GetDateTime();
            DateEnd = ((JsonElement)data[2]).GetDateTime();  
        }
        catch(KeyNotFoundException e )
        {
            await DefaultInit(timeFormat);
        }
        catch(NullReferenceException e)
        {
            await DefaultInit(timeFormat);

        }
        dataReady = true;
    }

    private async Task DefaultInit(TimeFormat timeFormat)
    {
        NewestDate = DateService.ResetDate(await DataService.GetNewestDateAsync(DeviceIds), timeFormat, false);

        TimeFormat = timeFormat;
        DateEnd = DateService.ResetDate(NewestDate, timeFormat, false);
        DateStart = DateService.ResetDate(DateService.AddDate(DateEnd, timeFormat, -GetOffset(timeFormat)), timeFormat, true);
    }

    private async Task ChangeDate(DateTime startDate, TimeFormat timeFormat)
    {
        if (TimeFormat != TimeFormat.Minute)
        {
            DateStart = startDate;
            await SetDatesOnRowClick(TimeFormat);
            TimeFormat -= 1;
        }
    }

    private async Task SetDatesOnRowClick(TimeFormat timeFormat)
    {
        DateStart = DateService.ResetDate(DateStart, timeFormat, true);
        DateEnd = DateService.ResetDate(DateStart, timeFormat, false);

        await Task.CompletedTask;
    }

    private void MoveCallback(bool goForward)
    {   
        int value = goForward ? 1 : -1; 
        DateStart = DateService.AddDate(DateStart, TimeFormat, value);
        DateEnd = DateService.ResetDate(DateService.AddDate(DateEnd, TimeFormat, value), TimeFormat, false);
    }

    private int GetOffset(TimeFormat timeFormat)
    {
        return timeFormat switch
        {
            TimeFormat.Minute => 60,
            TimeFormat.Hour => 24,
            TimeFormat.Day => 31,
            TimeFormat.Month => 12,
            TimeFormat.Year => 12,
            _ => 10,
        };
    }
}
